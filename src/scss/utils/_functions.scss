$rem-base: 16px !default;
$asset-base-path: "./dist" !default;

@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

@function convert-to-rem($value, $base-value: $rem-base) {
    $value: strip-unit($value) / strip-unit($base-value) * 1rem;
    @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
    @return $value;
}

@function rem-calc($values, $base-value: $rem-base) {
    $max: length($values);

    @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

    $remValues: ();

    @for $i from 1 through $max {
      $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
    }

    @return $remValues;
}

// Assist with declaring fonts and images in CSS
/* Usage: 
    @font-face {
        font-family: 'Unicorn Font';
        src: font('unicorn.eot?') format('eot'),
            font('unicorn.otf') format('truetype'),
            font('unicorn.woff') format('woff'),
            font('unicorn.svg#unicorn') format('svg');
        font-weight: normal;
        font-style: normal;
    }
    .foo {
         background-image: image('kittens.png');
    }   
    
    RENDERS.....
    @font-face {
        font-family: 'Unicorn Font';
        src: url("../assets/fonts/unicorn.eot?") format("eot"), url("../assets/fonts/unicorn.otf") format("truetype"), url("../assets/fonts/unicorn.woff") format("woff"), url("../assets/fonts/unicorn.svg#unicorn") format("svg");
        font-weight: normal;
        font-style: normal;
    }

    .foo {
        background-image: url("../assets/images/kittens.png");
    }
*/
@function asset($type, $file){
    @return url($asset-base-path+'/'+$type+'/'+$file);
}

@function image($file){
    @return asset('images', $file);
}

@function font($file){
    @return asset('fonts', $file);
}
