@mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
    display: $display;
    position: $pos;
}

@mixin responsive-ratio($x,$y, $pseudo: false) {
    $padding: unquote( ( $y / $x ) * 100 + '%' );
    @if $pseudo {
        &:before {
            @include pseudo($pos: relative);
            width: 100%;
            padding-top: $padding;
        }
    } @else {
        padding-top: $padding;
    }
}

@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
    @include pseudo($pos: $position);
    width: 0;
    height: 0;
    @if $round {
        border-radius: 3px;
    }
    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round( $size / 2.5 );
    } @else if $direction == up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round( $size / 2.5 );
    } @else if $direction == right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    } @else if  $direction == left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}

@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

@mixin hardware($backface: true, $perspective: 1000) {
    @if $backface {
        backface-visibility: hidden;
    }
    perspective: $perspective;
}

@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}

@mixin svg-fill($color) {
    svg {
        path {
            fill: $color;
        }
    }
}

@mixin img_squared($position: relative, $hover: false, $overlay: false, $percentage: 100%, $img_fit: cover) {
    position: $position;
    overflow: hidden;

    &:after {
        content: '';
        display: block;
        padding-top: $percentage;

    }
    @if $overlay == true {
        &:before {
            content: '';
            position: absolute;
            z-index: 1;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba($black, 0.2);
        }
    }

    img {
        position: absolute;
        @if $overlay == true {
            z-index: 0;
        }
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        width: 100%;
        height: 100%;
        object-fit: $img_fit;
        object-position: center;
        transform: scale(1);
        transition: transform 600ms ease-in-out;
    }

    @if $hover == true {
        &:hover {
            img {
                transform: scale(1.05);
            }
        }
    }
}

@mixin fill_image($position: relative, $overlay: true) {
    position: $position;

    img {
        position: absolute;
        @if $overlay == true {
            z-index: 0;
        }
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        object-position: center;
    }
}

/**
Usage:
    body {
        a {
            @include links(red, green, blue, yellow, pink);
        }
    }
*/
@mixin links($link, $visit, $hover, $active, $focus){
    & {
        color: $link;
        &:visited {
            color: $visit;
        }
        &:hover {
            color: $hover;
        }
        &:active {
            color: $active;
        }
        &:focus {
            color: $focus;
        }
    }
}

/** BEM classification */
/**
Usage:Usage:
    .block {
        @include element('element') {
            .block__element
        }
    @include modifier('modifier') {
        .block--modifier
        @include element('element') {
            .block--modifier__element
        }
    }
}
*/

@mixin element($element){
    &__#{$element}{
        @content;
    }
}

@mixin modifier($modifier){
    &--#{$modifier}{
        @content;
    }
}

/// Since the current way to qualify a class from within its ruleset is quite
/// ugly, here is a mixin providing a friendly API to do so.
/// @param {String} $element-selector - Element selector
/** Usage: 
.button {
  border: none;
  
  // Qualify `.button` with `button`
  @include qualify(button) {
    -webkit-appearance: none;
  }
  
  // Qualify `.button` with `a`
  @include when-is(a) {
    text-decoration: none;
  }
}
*/

@mixin qualify($element-selector) {
    @at-root #{$element-selector + &} {
        @content;
    }
}

@mixin when-is($args...) {
  @include qualify($args...) {
    @content;
  }
}


